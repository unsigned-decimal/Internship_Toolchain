// %%%%%%%
// %<    %
// % % % %
// %  G  %
// % % % %
// %     %
// %%%%%%%

pomdp

// can observe the walls and target
observables 
	h_obs, h_obs_y
endobservables 

const int MAXh = 10;
const int MINh = -10;

const int MAXhdot = 3;
const int MINhdot = -3;
const int MAXhdotdot = 1;
const int MINhdotdot = -1;
const int obsval=2;
const int h_obsmax=(MAXh-MINh)/obsval;
const double hdotdot_gauss = 0.5;
const double hdotdot_gauss2 = 0.5;
const double hdotdot_acc_nominal = 0.9;
const int xinit=MAXh-1;
const int yinit=MINh+1;
formula crash = (h<=4 & h>=-4) & (h_y <=4 & h_y>=-4);
formula hobsval = (h_obs=50 & h_obs_y=50);
const int obsint=2;
//const double p1;
//const double p2;
//const double p3;
//global c : [0..3] init 0;

//module to sequence each update
//module control
	//c : [0..3] init 0;
       // [h_update] c = 0 -> 1: (c'=1);
       // [h_update] c = 1 -> 1: (c'=2);
      //  [h_update] c = 2 -> 1: (c'=3);
      // [h_update] c = 3 -> 1: (c'=0);
//endmodule

module aircraft
	//vertical altitude
	//c : [0..3] init 0;
	h : [MINh..MAXh] init xinit;
	h_y : [MINh..MAXh] init yinit;
	//vertical rate
	hdot : [MINhdot..MAXhdot] init 0;
	hdot_y : [MINhdot..MAXhdot] init 0;
	//vertical acceleration
//	hdotdot: [MINhdotdot..MAXhdotdot] init 0;
//	hdotdot_y: [MINhdotdot..MAXhdotdot] init 0;
	//observed altitude
	h_obs: [-30..50] init 50;
	h_obs_y: [-30..50] init 50;
	//observed rate
	c : [0..6] init 0;
	// update the altitude according to current rate
	[h_update]  hobsval & c=0 & !crash -> 1:(h'=max(MINh,min(MAXh,h+hdot))) & (h_y'=max(MINh,min(MAXh,h_y+hdot_y)))  &(c'=1);

			    //  +(1-h_obs_nominal)/2:(h'=max(MINh,min(MAXh,h+hdot))) & (h_obs'=max(MINh,min(MAXh,h+hdot-1))) & (c'=1);

	//[h_update]  c=1 & !crash  h>=0 & h_y >=0-> 1:(h_obs'=floor(h/obsint))  & (h_obs_y'=floor(h_y/obsint))   &(c'=2);
	//[h_update]  c=1 & !crash  h<0 & h_y >=0-> 1:(h_obs'=floor(h/obsint))  & (h_obs_y'=floor(h_y/obsint))   &(c'=2);
	//[h_update]  c=1 & !crash h>=0 & h_y <0 -> 1:(h_obs'=floor(h/obsint))  & (h_obs_y'=floor(h_y/obsint))   &(c'=2);
//	[h_update]  c=1 & !crash  h<0 & h_y <0 -> 1:(h_obs'=floor(h/obsint))  & (h_obs_y'=floor(h_y/obsint))   &(c'=2);
	//[h_update]  c=1 & !crash & h<0 & h_y >=0  -> 1: (h_obs'=floor(h/2))  & (h_obs_y'=floor(h_y/2))   &(c'=2);	
	//[h_update]  c=1 & !crash & h>=0 & h_y <0  -> 1: (h_obs'=floor(h/2))  & (h_obs_y'=floor(h_y/2))  &(c'=2);
	//[h_update]  c=1 & !crash & h<0 & h_y <0  -> 1: (h_obs'=floor(h/2))  & (h_obs_y'=floor(h_y/2))  &(c'=2);
			    //  +(1-h_obs_nominal)/2:(h'=max(MINh,min(MAXh,h+hdot))) & (h_obs'=max(MINh,min(MAXh,h+hdot-1))) & (c'=1);

	// update the rate according to current acceleration

	// adversary randomly chooses acceleration
	[h_update]  hobsval & c=1 & !crash-> (1-hdotdot_gauss):(hdot'=max(MINhdot,min(MAXhdot,hdot+1))) & (c'=4)
				+hdotdot_gauss:(hdot'=max(MINhdot,min(MAXhdot,hdot-1)))& (c'=4);
	//[h_update]  hobsval  & c=2 & !crash-> (1-hdotdot_gauss2):(hdot'=max(MINhdot,min(MAXhdot,hdot-1))) & (c'=3)
	//			+hdotdot_gauss2:(hdot'=max(MINhdot,min(MAXhdot,hdot)))& (c'=3);
			//	+(1-hdotdot_gauss)/2:(hdot'=max(MINhdot,min(MAXhdot,hdot-1)))& (c'=3);
	//[h_update]  hobsval  &c=3 & !crash-> (1-hdotdot_gauss):(hdot_y'=max(MINhdot,min(MAXhdot,hdot_y-1)))& (c'=4)
	//			+hdotdot_gauss: (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))& (c'=4);
	[h_update] hobsval  & c=4 & !crash-> (1-hdotdot_gauss2):(hdot_y'=max(MINhdot,min(MAXhdot,hdot_y+1)))& (c'=5)
				+hdotdot_gauss2: (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y-1)))& (c'=5);
	[h_update]  hobsval & c=5 & !crash  -> 1:(h_obs'=floor(h/obsint))  & (h_obs_y'=floor(h_y/obsint))   &(c'=6);
	//[h_update]  hobsval & c=5 & h>=0 & h_y <0 &!crash  -> 1:(h_obs'=floor(h/obsint))  & (h_obs_y'=floor(-h_y/obsint))   &(c'=6)
        //[h_update]  hobsval & c=5 & h<0 & h_y >=0 &!crash  -> 1:(h_obs'=floor(-h/obsint))  & (h_obs_y'=floor(h_y/obsint))   &(c'=6);
	//[h_update]  hobsval & c=5 & h<0 & h_y <0& !crash  -> 1:(h_obs'=floor(-h/obsint))  & (h_obs_y'=floor(-h_y/obsint))   &(c'=6);
				//+(1-hdotdot_gauss)/2: (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y+1)))& (c'=4);
	//the controller picks acceleration
	//[h_update1] c=4 & !crash->hdotdot_acc_nominal:(hdotdot'=max(MINhdotdot,min(MAXhdotdot,hdotdot+1)))& (c'=0) & (hdotdot_y'=max(MINhdotdot,min(MAXhdotdot,hdotdot_y+1)))
	//		+(1-hdotdot_acc_nominal)/2:(hdotdot'=max(MINhdotdot,min(MAXhdotdot,hdotdot)))& (c'=0)& (hdotdot_y'=max(MINhdotdot,min(MAXhdotdot,hdotdot_y)))
	//		+(1-hdotdot_acc_nominal)/2:(hdotdot'=max(MINhdotdot,min(MAXhdotdot,hdotdot-1)))& (c'=0)& (hdotdot_y'=max(MINhdotdot,min(MAXhdotdot,hdotdot_y-1)));
	//[h_update12] c=4 & !crash->hdotdot_acc_nominal:(hdotdot'=max(MINhdotdot,min(MAXhdotdot,hdotdot)))& (c'=0) & (hdotdot_y'=max(MINhdotdot,min(MAXhdotdot,hdotdot_y)))
	//		+(1-hdotdot_acc_nominal)/2:(hdotdot'=max(MINhdotdot,min(MAXhdotdot,hdotdot+1)))& (c'=0)& (hdotdot_y'=max(MINhdotdot,min(MAXhdotdot,hdotdot_y+1)))
	//		+(1-hdotdot_acc_nominal)/2:(hdotdot'=max(MINhdotdot,min(MAXhdotdot,hdotdot-1)))& (c'=0)& (hdotdot_y'=max(MINhdotdot,min(MAXhdotdot,hdotdot_y-1)));
	//[h_update13] c=4 & !crash->hdotdot_acc_nominal:(hdotdot'=max(MINhdotdot,min(MAXhdotdot,hdotdot-1)))& (c'=0) & (hdotdot_y'=max(MINhdotdot,min(MAXhdotdot,hdotdot_y-1)))
	//		+(1-hdotdot_acc_nominal)/2:(hdotdot'=max(MINhdotdot,min(MAXhdotdot,hdotdot)))& (c'=0)& (hdotdot_y'=max(MINhdotdot,min(MAXhdotdot,hdotdot_y)))
	//		+(1-hdotdot_acc_nominal)/2:(hdotdot'=max(MINhdotdot,min(MAXhdotdot,hdotdot+1)))& (c'=0)& (hdotdot_y'=max(MINhdotdot,min(MAXhdotdot,hdotdot_y+1)));
	[h_update1] !hobsval  & c=6 & !crash->hdotdot_acc_nominal:(hdot'=max(MINhdot,min(MAXhdot,hdot+2))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y+2)))&(h_obs'=50)  & (h_obs_y'=50)   & (c'=0)+
			(1-hdotdot_acc_nominal):(hdot'=max(MINhdot,min(MAXhdot,hdot))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))& (h_obs'=50)  & (h_obs_y'=50)   &(c'=0);
	[h_update12] !hobsval  & c=6 & !crash->hdotdot_acc_nominal:(hdot'=max(MINhdot,min(MAXhdot,hdot-2))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y+2)))& (h_obs'=50)  & (h_obs_y'=50)   &(c'=0)+
			(1-hdotdot_acc_nominal):(hdot'=max(MINhdot,min(MAXhdot,hdot))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))& (h_obs'=50)  & (h_obs_y'=50)   &(c'=0);
	[h_update13] !hobsval  & c=6 & !crash->hdotdot_acc_nominal:(hdot'=max(MINhdot,min(MAXhdot,hdot+2))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y-2)))&(h_obs'=50)  & (h_obs_y'=50)   & (c'=0)+
			(1-hdotdot_acc_nominal):(hdot'=max(MINhdot,min(MAXhdot,hdot))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))&(h_obs'=50)  & (h_obs_y'=50)   & (c'=0);
	[h_update14] !hobsval  & c=6 & !crash->hdotdot_acc_nominal:(hdot'=max(MINhdot,min(MAXhdot,hdot-2))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y-2)))&(h_obs'=50)  & (h_obs_y'=50)   & (c'=0)+
			(1-hdotdot_acc_nominal):(hdot'=max(MINhdot,min(MAXhdot,hdot))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))& (h_obs'=50)  & (h_obs_y'=50)   & (c'=0);
	[] crash -> true;

endmodule

// reward structure to calculate steps
rewards
	  [h_update1] true  : 1;
	 [h_update12] true : 1;
	 [h_update13] true : 1;
	 [h_update14] true : 1;
	 crash : 100;
endrewards

// target observation or state
label "goal" = h=MINh & h_y=MAXh;


